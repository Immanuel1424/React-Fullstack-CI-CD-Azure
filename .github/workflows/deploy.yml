name: Deploy Fullstack App

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      SSH_USER: ubuntu
      PUBLIC_IP: "15.207.237.254"  # Public IP from your test
      PRIVATE_IP: "12.0.2.154"     # Private IP from your test
      SSH_KEY: ${{ secrets.SSH_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Configure SSH Access
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/cft.pem
        chmod 600 ~/.ssh/cft.pem
        
        # Configure SSH to use the correct key
        echo -e "Host $PUBLIC_IP\n  IdentityFile ~/.ssh/cft.pem\n  User $SSH_USER" > ~/.ssh/config
        echo -e "Host $PRIVATE_IP\n  IdentityFile ~/.ssh/cft.pem\n  User $SSH_USER\n  ProxyJump $SSH_USER@$PUBLIC_IP" >> ~/.ssh/config
        
        # Test connections
        ssh -o ConnectTimeout=5 $PUBLIC_IP "echo 'Public connection OK'" || exit 1
        ssh -o ConnectTimeout=5 $PRIVATE_IP "echo 'Private connection OK'" || exit 1

    - name: Build and Package
      run: |
        tar czf fullstack.tar.gz -C . server client
        echo "Package size: $(du -h fullstack.tar.gz | cut -f1)"

    - name: Deploy to Public Instance
      run: |
        scp -o ConnectTimeout=10 fullstack.tar.gz $PUBLIC_IP:/tmp/
        ssh $PUBLIC_IP "ls -lh /tmp/fullstack.tar.gz"

    - name: Deploy to Private Instance
      run: |
        ssh $PUBLIC_IP <<'EOF'
          set -e
          scp /tmp/fullstack.tar.gz $PRIVATE_IP:/tmp/
          
          ssh $PRIVATE_IP <<'INNER'
            set -e
            echo "Starting deployment at $(date)"
            
            # Clean deployment directory
            sudo rm -rf /opt/fullstack
            sudo mkdir -p /opt/fullstack
            sudo chown -R $USER:$USER /opt/fullstack
            
            # Extract and install
            sudo tar xzf /tmp/fullstack.tar.gz -C /opt/fullstack
            
            cd /opt/fullstack/server
            npm ci --legacy-peer-deps
            
            cd /opt/fullstack/client
            npm install ajv@6 ajv-keywords@3 --legacy-peer-deps
            npm ci --legacy-peer-deps
            npm run build
            
            # Restart services
            sudo systemctl restart backend
            sudo systemctl restart frontend
            echo "Deployment completed at $(date)"
          INNER
        EOF

    - name: Verify Services
      run: |
        ssh $PRIVATE_IP "
          curl -s http://localhost:3000/api/health || echo 'Backend not responding'
          sudo systemctl status backend | grep 'active (running)' || echo 'Backend service down'
          sudo systemctl status frontend | grep 'active (running)' || echo 'Frontend service down'
        "
