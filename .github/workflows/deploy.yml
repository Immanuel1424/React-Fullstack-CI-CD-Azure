name: Deploy Fullstack App

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SSH_USER: ubuntu
      PUBLIC_IP: ${{ secrets.PUBLIC_INSTANCE_IP }}
      PRIVATE_IP: ${{ secrets.PRIVATE_INSTANCE_IP }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Setup SSH Key (Safe Fallback)
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        touch ~/.ssh/known_hosts  # Avoid keyscan failure

    - name: Install backend dependencies
      working-directory: ./server
      run: |
        npm install

    - name: Install frontend dependencies and build
      working-directory: ./client
      run: |
        npm install ajv@6 ajv-keywords@3 --legacy-peer-deps
        npm install --legacy-peer-deps
        npm run build

    - name: Archive project
      run: |
        tar czf fullstack.tar.gz -C . server client

    - name: Copy project to public EC2 instance
      run: |
        scp -o StrictHostKeyChecking=no fullstack.tar.gz $SSH_USER@${{ env.PUBLIC_IP }}:/tmp/

    - name: Deploy on EC2 (Private Instance via Public Jump)
      run: |
        ssh -o StrictHostKeyChecking=no -o ProxyJump=$SSH_USER@${{ env.PUBLIC_IP }} $SSH_USER@${{ env.PRIVATE_IP }} << 'EOF'
          sudo rm -rf /opt/fullstack
          sudo mkdir -p /opt/fullstack
          sudo tar xzf /tmp/fullstack.tar.gz -C /opt/fullstack
          
          cd /opt/fullstack/server
          npm install --legacy-peer-deps

          cd /opt/fullstack/client
          npm install ajv@6 ajv-keywords@3 --legacy-peer-deps
          npm install --legacy-peer-deps
          npm run build

          sudo systemctl restart backend
          sudo systemctl restart frontend
EOF
